#!/bin/bash
# Pre-commit hook for HSOF project

echo "Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Track if any check fails
FAILED=0

# Function to print status
print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}✓${NC} $2"
    else
        echo -e "${RED}✗${NC} $2"
        FAILED=1
    fi
}

# Check for large files
echo "Checking for large files..."
LARGE_FILES=$(find . -type f -size +10M -not -path "./.git/*" -not -path "./data/*" 2>/dev/null)
if [ -z "$LARGE_FILES" ]; then
    print_status 0 "No large files (>10MB)"
else
    print_status 1 "Large files found:"
    echo "$LARGE_FILES"
fi

# Check for sensitive information
echo "Checking for sensitive information..."
SENSITIVE_PATTERNS=(
    "password.*=.*['\"].*['\"]"
    "api[_-]?key.*=.*['\"].*['\"]"
    "secret.*=.*['\"].*['\"]"
    "token.*=.*['\"].*['\"]"
)

SENSITIVE_FOUND=0
for pattern in "${SENSITIVE_PATTERNS[@]}"; do
    MATCHES=$(git diff --cached --name-only | xargs grep -l -E -i "$pattern" 2>/dev/null || true)
    if [ ! -z "$MATCHES" ]; then
        SENSITIVE_FOUND=1
        echo -e "${YELLOW}Warning: Potential sensitive information in:${NC}"
        echo "$MATCHES"
    fi
done
print_status $((1-SENSITIVE_FOUND)) "Sensitive information check"

# Run Julia syntax check on staged files
echo "Checking Julia syntax..."
JULIA_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.jl$' || true)
SYNTAX_ERRORS=0

if [ ! -z "$JULIA_FILES" ]; then
    for file in $JULIA_FILES; do
        if ! julia -e "include(\"$file\")" 2>/dev/null; then
            echo -e "${RED}Syntax error in $file${NC}"
            SYNTAX_ERRORS=1
        fi
    done
fi
print_status $((1-SYNTAX_ERRORS)) "Julia syntax check"

# Check TODO/FIXME comments
echo "Checking for TODO/FIXME comments..."
TODO_COUNT=$(git diff --cached | grep -c "TODO\|FIXME" || true)
if [ $TODO_COUNT -gt 0 ]; then
    echo -e "${YELLOW}Warning: $TODO_COUNT TODO/FIXME comments added${NC}"
fi

# Run quick tests if available
if [ -f "test/test_config_loader.jl" ]; then
    echo "Running quick tests..."
    if julia --project=. test/test_config_loader.jl >/dev/null 2>&1; then
        print_status 0 "Configuration tests"
    else
        print_status 1 "Configuration tests"
    fi
fi

# Check formatting (if JuliaFormatter is available)
if julia -e "using Pkg; exit(\"JuliaFormatter\" in keys(Pkg.project().dependencies) ? 0 : 1)" 2>/dev/null; then
    echo "Checking code formatting..."
    FORMAT_CHECK=$(julia -e "
        using JuliaFormatter
        files = filter(f -> endswith(f, \".jl\"), readdir(\"src\", join=true))
        all_formatted = all(format_file(f, overwrite=false) for f in files)
        exit(all_formatted ? 0 : 1)
    " 2>&1)
    
    if [ $? -eq 0 ]; then
        print_status 0 "Code formatting"
    else
        print_status 1 "Code formatting (run: make format)"
    fi
fi

# Final status
echo ""
if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}All pre-commit checks passed!${NC}"
    exit 0
else
    echo -e "${RED}Some pre-commit checks failed!${NC}"
    echo "Fix the issues or use 'git commit --no-verify' to skip checks"
    exit 1
fi